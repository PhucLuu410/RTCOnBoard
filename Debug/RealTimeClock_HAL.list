
RealTimeClock_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ffc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002108  08002108  00012108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002148  08002148  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002148  08002148  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002148  08002148  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002148  08002148  00012148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800214c  0800214c  0001214c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002150  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  2000000c  0800215c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000040  0800215c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004564  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000147c  00000000  00000000  000245dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b8  00000000  00000000  00025a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000427  00000000  00000000  00026010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000161ae  00000000  00000000  00026437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006e2f  00000000  00000000  0003c5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e034  00000000  00000000  00043414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000014bc  00000000  00000000  000c1448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000c2904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020f0 	.word	0x080020f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020f0 	.word	0x080020f0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 f9a3 	bl	800049c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f835 	bl	80001c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f8a3 	bl	80002a4 <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f885 	bl	800026c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RTC_TimeTypeDef sTime = {0};
 8000162:	1d3b      	adds	r3, r7, #4
 8000164:	2100      	movs	r1, #0
 8000166:	460a      	mov	r2, r1
 8000168:	801a      	strh	r2, [r3, #0]
 800016a:	460a      	mov	r2, r1
 800016c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef sDate = {0};
 800016e:	2300      	movs	r3, #0
 8000170:	603b      	str	r3, [r7, #0]
  sTime.Seconds = 0x00;
 8000172:	2300      	movs	r3, #0
 8000174:	71bb      	strb	r3, [r7, #6]
  sTime.Minutes = 0x26;
 8000176:	2326      	movs	r3, #38	; 0x26
 8000178:	717b      	strb	r3, [r7, #5]
  sTime.Hours = 0x07;
 800017a:	2307      	movs	r3, #7
 800017c:	713b      	strb	r3, [r7, #4]

  HAL_RTC_SetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 800017e:	1d3b      	adds	r3, r7, #4
 8000180:	2201      	movs	r2, #1
 8000182:	4619      	mov	r1, r3
 8000184:	480e      	ldr	r0, [pc, #56]	; (80001c0 <main+0x74>)
 8000186:	f001 fa6b 	bl	8001660 <HAL_RTC_SetTime>

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800018a:	2301      	movs	r3, #1
 800018c:	703b      	strb	r3, [r7, #0]
  sDate.Date = 0x01;
 800018e:	2301      	movs	r3, #1
 8000190:	70bb      	strb	r3, [r7, #2]
  sDate.Month = 0x07;
 8000192:	2307      	movs	r3, #7
 8000194:	707b      	strb	r3, [r7, #1]
  sDate.Year = 0x24;
 8000196:	2324      	movs	r3, #36	; 0x24
 8000198:	70fb      	strb	r3, [r7, #3]


  HAL_RTC_SetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 800019a:	463b      	mov	r3, r7
 800019c:	2201      	movs	r2, #1
 800019e:	4619      	mov	r1, r3
 80001a0:	4807      	ldr	r0, [pc, #28]	; (80001c0 <main+0x74>)
 80001a2:	f001 fbcd 	bl	8001940 <HAL_RTC_SetDate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2201      	movs	r2, #1
 80001aa:	4619      	mov	r1, r3
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <main+0x74>)
 80001ae:	f001 faef 	bl	8001790 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc,&sDate,RTC_FORMAT_BCD);
 80001b2:	463b      	mov	r3, r7
 80001b4:	2201      	movs	r2, #1
 80001b6:	4619      	mov	r1, r3
 80001b8:	4801      	ldr	r0, [pc, #4]	; (80001c0 <main+0x74>)
 80001ba:	f001 fc77 	bl	8001aac <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc,&sTime,RTC_FORMAT_BCD);
 80001be:	e7f2      	b.n	80001a6 <main+0x5a>
 80001c0:	20000028 	.word	0x20000028

080001c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b094      	sub	sp, #80	; 0x50
 80001c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ce:	2228      	movs	r2, #40	; 0x28
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 ff60 	bl	8002098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d8:	f107 0314 	add.w	r3, r7, #20
 80001dc:	2200      	movs	r2, #0
 80001de:	601a      	str	r2, [r3, #0]
 80001e0:	605a      	str	r2, [r3, #4]
 80001e2:	609a      	str	r2, [r3, #8]
 80001e4:	60da      	str	r2, [r3, #12]
 80001e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80001f4:	2303      	movs	r3, #3
 80001f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000206:	2300      	movs	r3, #0
 8000208:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020e:	4618      	mov	r0, r3
 8000210:	f000 fc32 	bl	8000a78 <HAL_RCC_OscConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800021a:	f000 f88f 	bl	800033c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021e:	230f      	movs	r3, #15
 8000220:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000232:	f107 0314 	add.w	r3, r7, #20
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fe9f 	bl	8000f7c <HAL_RCC_ClockConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000244:	f000 f87a 	bl	800033c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000248:	2301      	movs	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 800024c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000250:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000252:	1d3b      	adds	r3, r7, #4
 8000254:	4618      	mov	r0, r3
 8000256:	f001 f80b 	bl	8001270 <HAL_RCCEx_PeriphCLKConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000260:	f000 f86c 	bl	800033c <Error_Handler>
  }
}
 8000264:	bf00      	nop
 8000266:	3750      	adds	r7, #80	; 0x50
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000270:	4b0a      	ldr	r3, [pc, #40]	; (800029c <MX_RTC_Init+0x30>)
 8000272:	4a0b      	ldr	r2, [pc, #44]	; (80002a0 <MX_RTC_Init+0x34>)
 8000274:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000276:	4b09      	ldr	r3, [pc, #36]	; (800029c <MX_RTC_Init+0x30>)
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800027e:	4b07      	ldr	r3, [pc, #28]	; (800029c <MX_RTC_Init+0x30>)
 8000280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000284:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000286:	4805      	ldr	r0, [pc, #20]	; (800029c <MX_RTC_Init+0x30>)
 8000288:	f001 f95e 	bl	8001548 <HAL_RTC_Init>
 800028c:	4603      	mov	r3, r0
 800028e:	2b00      	cmp	r3, #0
 8000290:	d001      	beq.n	8000296 <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8000292:	f000 f853 	bl	800033c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000296:	bf00      	nop
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	20000028 	.word	0x20000028
 80002a0:	40002800 	.word	0x40002800

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b088      	sub	sp, #32
 80002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	f107 0310 	add.w	r3, r7, #16
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b8:	4b1e      	ldr	r3, [pc, #120]	; (8000334 <MX_GPIO_Init+0x90>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a1d      	ldr	r2, [pc, #116]	; (8000334 <MX_GPIO_Init+0x90>)
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b1b      	ldr	r3, [pc, #108]	; (8000334 <MX_GPIO_Init+0x90>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0310 	and.w	r3, r3, #16
 80002cc:	60fb      	str	r3, [r7, #12]
 80002ce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d0:	4b18      	ldr	r3, [pc, #96]	; (8000334 <MX_GPIO_Init+0x90>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	4a17      	ldr	r2, [pc, #92]	; (8000334 <MX_GPIO_Init+0x90>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6193      	str	r3, [r2, #24]
 80002dc:	4b15      	ldr	r3, [pc, #84]	; (8000334 <MX_GPIO_Init+0x90>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	f003 0320 	and.w	r3, r3, #32
 80002e4:	60bb      	str	r3, [r7, #8]
 80002e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e8:	4b12      	ldr	r3, [pc, #72]	; (8000334 <MX_GPIO_Init+0x90>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	4a11      	ldr	r2, [pc, #68]	; (8000334 <MX_GPIO_Init+0x90>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6193      	str	r3, [r2, #24]
 80002f4:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <MX_GPIO_Init+0x90>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	f003 0304 	and.w	r3, r3, #4
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <MX_GPIO_Init+0x94>)
 8000308:	f000 fb92 	bl	8000a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800030c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000310:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000312:	2301      	movs	r3, #1
 8000314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000316:	2300      	movs	r3, #0
 8000318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031a:	2302      	movs	r3, #2
 800031c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	4619      	mov	r1, r3
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <MX_GPIO_Init+0x94>)
 8000326:	f000 f9ff 	bl	8000728 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800032a:	bf00      	nop
 800032c:	3720      	adds	r7, #32
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000
 8000338:	40011000 	.word	0x40011000

0800033c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000344:	e7fe      	b.n	8000344 <Error_Handler+0x8>
	...

08000348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	4a14      	ldr	r2, [pc, #80]	; (80003a4 <HAL_MspInit+0x5c>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6193      	str	r3, [r2, #24]
 800035a:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <HAL_MspInit+0x5c>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
 8000364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x5c>)
 800036c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000370:	61d3      	str	r3, [r2, #28]
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x5c>)
 8000374:	69db      	ldr	r3, [r3, #28]
 8000376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800037e:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <HAL_MspInit+0x60>)
 8000380:	685b      	ldr	r3, [r3, #4]
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4a04      	ldr	r2, [pc, #16]	; (80003a8 <HAL_MspInit+0x60>)
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800039a:	bf00      	nop
 800039c:	3714      	adds	r7, #20
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010000 	.word	0x40010000

080003ac <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a0b      	ldr	r2, [pc, #44]	; (80003e8 <HAL_RTC_MspInit+0x3c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d110      	bne.n	80003e0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80003be:	f000 fb4f 	bl	8000a60 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_RTC_MspInit+0x40>)
 80003c4:	69db      	ldr	r3, [r3, #28]
 80003c6:	4a09      	ldr	r2, [pc, #36]	; (80003ec <HAL_RTC_MspInit+0x40>)
 80003c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003cc:	61d3      	str	r3, [r2, #28]
 80003ce:	4b07      	ldr	r3, [pc, #28]	; (80003ec <HAL_RTC_MspInit+0x40>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <HAL_RTC_MspInit+0x44>)
 80003dc:	2201      	movs	r2, #1
 80003de:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40002800 	.word	0x40002800
 80003ec:	40021000 	.word	0x40021000
 80003f0:	4242043c 	.word	0x4242043c

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <NMI_Handler+0x4>

080003fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <HardFault_Handler+0x4>

08000400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <MemManage_Handler+0x4>

08000406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <BusFault_Handler+0x4>

0800040c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000410:	e7fe      	b.n	8000410 <UsageFault_Handler+0x4>

08000412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000412:	b480      	push	{r7}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000416:	bf00      	nop
 8000418:	46bd      	mov	sp, r7
 800041a:	bc80      	pop	{r7}
 800041c:	4770      	bx	lr

0800041e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041e:	b480      	push	{r7}
 8000420:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000422:	bf00      	nop
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	bc80      	pop	{r7}
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 f875 	bl	8000528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}

08000442 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	bc80      	pop	{r7}
 800044c:	4770      	bx	lr
	...

08000450 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000450:	f7ff fff7 	bl	8000442 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000454:	480b      	ldr	r0, [pc, #44]	; (8000484 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000456:	490c      	ldr	r1, [pc, #48]	; (8000488 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000458:	4a0c      	ldr	r2, [pc, #48]	; (800048c <LoopFillZerobss+0x16>)
  movs r3, #0
 800045a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800045c:	e002      	b.n	8000464 <LoopCopyDataInit>

0800045e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800045e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000462:	3304      	adds	r3, #4

08000464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000468:	d3f9      	bcc.n	800045e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046a:	4a09      	ldr	r2, [pc, #36]	; (8000490 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800046c:	4c09      	ldr	r4, [pc, #36]	; (8000494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800046e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000470:	e001      	b.n	8000476 <LoopFillZerobss>

08000472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000474:	3204      	adds	r2, #4

08000476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000478:	d3fb      	bcc.n	8000472 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800047a:	f001 fe15 	bl	80020a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800047e:	f7ff fe65 	bl	800014c <main>
  bx lr
 8000482:	4770      	bx	lr
  ldr r0, =_sdata
 8000484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000488:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800048c:	08002150 	.word	0x08002150
  ldr r2, =_sbss
 8000490:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000494:	20000040 	.word	0x20000040

08000498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000498:	e7fe      	b.n	8000498 <ADC1_2_IRQHandler>
	...

0800049c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004a0:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <HAL_Init+0x28>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a07      	ldr	r2, [pc, #28]	; (80004c4 <HAL_Init+0x28>)
 80004a6:	f043 0310 	orr.w	r3, r3, #16
 80004aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004ac:	2003      	movs	r0, #3
 80004ae:	f000 f907 	bl	80006c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004b2:	200f      	movs	r0, #15
 80004b4:	f000 f808 	bl	80004c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004b8:	f7ff ff46 	bl	8000348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	40022000 	.word	0x40022000

080004c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004d0:	4b12      	ldr	r3, [pc, #72]	; (800051c <HAL_InitTick+0x54>)
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_InitTick+0x58>)
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4619      	mov	r1, r3
 80004da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004de:	fbb3 f3f1 	udiv	r3, r3, r1
 80004e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004e6:	4618      	mov	r0, r3
 80004e8:	f000 f911 	bl	800070e <HAL_SYSTICK_Config>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004f2:	2301      	movs	r3, #1
 80004f4:	e00e      	b.n	8000514 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b0f      	cmp	r3, #15
 80004fa:	d80a      	bhi.n	8000512 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	2200      	movs	r2, #0
 80004fe:	6879      	ldr	r1, [r7, #4]
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f8e7 	bl	80006d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4a06      	ldr	r2, [pc, #24]	; (8000524 <HAL_InitTick+0x5c>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800050e:	2300      	movs	r3, #0
 8000510:	e000      	b.n	8000514 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000512:	2301      	movs	r3, #1
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000000 	.word	0x20000000
 8000520:	20000008 	.word	0x20000008
 8000524:	20000004 	.word	0x20000004

08000528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800052c:	4b05      	ldr	r3, [pc, #20]	; (8000544 <HAL_IncTick+0x1c>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	461a      	mov	r2, r3
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_IncTick+0x20>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	4a03      	ldr	r2, [pc, #12]	; (8000548 <HAL_IncTick+0x20>)
 800053a:	6013      	str	r3, [r2, #0]
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	bc80      	pop	{r7}
 8000542:	4770      	bx	lr
 8000544:	20000008 	.word	0x20000008
 8000548:	2000003c 	.word	0x2000003c

0800054c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  return uwTick;
 8000550:	4b02      	ldr	r3, [pc, #8]	; (800055c <HAL_GetTick+0x10>)
 8000552:	681b      	ldr	r3, [r3, #0]
}
 8000554:	4618      	mov	r0, r3
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	2000003c 	.word	0x2000003c

08000560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	f003 0307 	and.w	r3, r3, #7
 800056e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000572:	68db      	ldr	r3, [r3, #12]
 8000574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000576:	68ba      	ldr	r2, [r7, #8]
 8000578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800057c:	4013      	ands	r3, r2
 800057e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800058c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	60d3      	str	r3, [r2, #12]
}
 8000598:	bf00      	nop
 800059a:	3714      	adds	r7, #20
 800059c:	46bd      	mov	sp, r7
 800059e:	bc80      	pop	{r7}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	e000ed00 	.word	0xe000ed00

080005a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <__NVIC_GetPriorityGrouping+0x18>)
 80005ae:	68db      	ldr	r3, [r3, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	f003 0307 	and.w	r3, r3, #7
}
 80005b6:	4618      	mov	r0, r3
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	6039      	str	r1, [r7, #0]
 80005ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	db0a      	blt.n	80005ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	b2da      	uxtb	r2, r3
 80005dc:	490c      	ldr	r1, [pc, #48]	; (8000610 <__NVIC_SetPriority+0x4c>)
 80005de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e2:	0112      	lsls	r2, r2, #4
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	440b      	add	r3, r1
 80005e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ec:	e00a      	b.n	8000604 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	b2da      	uxtb	r2, r3
 80005f2:	4908      	ldr	r1, [pc, #32]	; (8000614 <__NVIC_SetPriority+0x50>)
 80005f4:	79fb      	ldrb	r3, [r7, #7]
 80005f6:	f003 030f 	and.w	r3, r3, #15
 80005fa:	3b04      	subs	r3, #4
 80005fc:	0112      	lsls	r2, r2, #4
 80005fe:	b2d2      	uxtb	r2, r2
 8000600:	440b      	add	r3, r1
 8000602:	761a      	strb	r2, [r3, #24]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	bc80      	pop	{r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000e100 	.word	0xe000e100
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000618:	b480      	push	{r7}
 800061a:	b089      	sub	sp, #36	; 0x24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f003 0307 	and.w	r3, r3, #7
 800062a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	f1c3 0307 	rsb	r3, r3, #7
 8000632:	2b04      	cmp	r3, #4
 8000634:	bf28      	it	cs
 8000636:	2304      	movcs	r3, #4
 8000638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	3304      	adds	r3, #4
 800063e:	2b06      	cmp	r3, #6
 8000640:	d902      	bls.n	8000648 <NVIC_EncodePriority+0x30>
 8000642:	69fb      	ldr	r3, [r7, #28]
 8000644:	3b03      	subs	r3, #3
 8000646:	e000      	b.n	800064a <NVIC_EncodePriority+0x32>
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	f04f 32ff 	mov.w	r2, #4294967295
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	43da      	mvns	r2, r3
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	401a      	ands	r2, r3
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43d9      	mvns	r1, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000670:	4313      	orrs	r3, r2
         );
}
 8000672:	4618      	mov	r0, r3
 8000674:	3724      	adds	r7, #36	; 0x24
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr

0800067c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b01      	subs	r3, #1
 8000688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800068c:	d301      	bcc.n	8000692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800068e:	2301      	movs	r3, #1
 8000690:	e00f      	b.n	80006b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <SysTick_Config+0x40>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	3b01      	subs	r3, #1
 8000698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800069a:	210f      	movs	r1, #15
 800069c:	f04f 30ff 	mov.w	r0, #4294967295
 80006a0:	f7ff ff90 	bl	80005c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <SysTick_Config+0x40>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <SysTick_Config+0x40>)
 80006ac:	2207      	movs	r2, #7
 80006ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	e000e010 	.word	0xe000e010

080006c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f7ff ff49 	bl	8000560 <__NVIC_SetPriorityGrouping>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af00      	add	r7, sp, #0
 80006dc:	4603      	mov	r3, r0
 80006de:	60b9      	str	r1, [r7, #8]
 80006e0:	607a      	str	r2, [r7, #4]
 80006e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006e8:	f7ff ff5e 	bl	80005a8 <__NVIC_GetPriorityGrouping>
 80006ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	68b9      	ldr	r1, [r7, #8]
 80006f2:	6978      	ldr	r0, [r7, #20]
 80006f4:	f7ff ff90 	bl	8000618 <NVIC_EncodePriority>
 80006f8:	4602      	mov	r2, r0
 80006fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006fe:	4611      	mov	r1, r2
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ff5f 	bl	80005c4 <__NVIC_SetPriority>
}
 8000706:	bf00      	nop
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}

0800070e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f7ff ffb0 	bl	800067c <SysTick_Config>
 800071c:	4603      	mov	r3, r0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000728:	b480      	push	{r7}
 800072a:	b08b      	sub	sp, #44	; 0x2c
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000732:	2300      	movs	r3, #0
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000736:	2300      	movs	r3, #0
 8000738:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800073a:	e169      	b.n	8000a10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800073c:	2201      	movs	r2, #1
 800073e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000740:	fa02 f303 	lsl.w	r3, r2, r3
 8000744:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	69fa      	ldr	r2, [r7, #28]
 800074c:	4013      	ands	r3, r2
 800074e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000750:	69ba      	ldr	r2, [r7, #24]
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	429a      	cmp	r2, r3
 8000756:	f040 8158 	bne.w	8000a0a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	4a9a      	ldr	r2, [pc, #616]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d05e      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000764:	4a98      	ldr	r2, [pc, #608]	; (80009c8 <HAL_GPIO_Init+0x2a0>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d875      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800076a:	4a98      	ldr	r2, [pc, #608]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d058      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000770:	4a96      	ldr	r2, [pc, #600]	; (80009cc <HAL_GPIO_Init+0x2a4>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d86f      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 8000776:	4a96      	ldr	r2, [pc, #600]	; (80009d0 <HAL_GPIO_Init+0x2a8>)
 8000778:	4293      	cmp	r3, r2
 800077a:	d052      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 800077c:	4a94      	ldr	r2, [pc, #592]	; (80009d0 <HAL_GPIO_Init+0x2a8>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d869      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 8000782:	4a94      	ldr	r2, [pc, #592]	; (80009d4 <HAL_GPIO_Init+0x2ac>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d04c      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000788:	4a92      	ldr	r2, [pc, #584]	; (80009d4 <HAL_GPIO_Init+0x2ac>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d863      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800078e:	4a92      	ldr	r2, [pc, #584]	; (80009d8 <HAL_GPIO_Init+0x2b0>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d046      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
 8000794:	4a90      	ldr	r2, [pc, #576]	; (80009d8 <HAL_GPIO_Init+0x2b0>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d85d      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 800079a:	2b12      	cmp	r3, #18
 800079c:	d82a      	bhi.n	80007f4 <HAL_GPIO_Init+0xcc>
 800079e:	2b12      	cmp	r3, #18
 80007a0:	d859      	bhi.n	8000856 <HAL_GPIO_Init+0x12e>
 80007a2:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <HAL_GPIO_Init+0x80>)
 80007a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a8:	08000823 	.word	0x08000823
 80007ac:	080007fd 	.word	0x080007fd
 80007b0:	0800080f 	.word	0x0800080f
 80007b4:	08000851 	.word	0x08000851
 80007b8:	08000857 	.word	0x08000857
 80007bc:	08000857 	.word	0x08000857
 80007c0:	08000857 	.word	0x08000857
 80007c4:	08000857 	.word	0x08000857
 80007c8:	08000857 	.word	0x08000857
 80007cc:	08000857 	.word	0x08000857
 80007d0:	08000857 	.word	0x08000857
 80007d4:	08000857 	.word	0x08000857
 80007d8:	08000857 	.word	0x08000857
 80007dc:	08000857 	.word	0x08000857
 80007e0:	08000857 	.word	0x08000857
 80007e4:	08000857 	.word	0x08000857
 80007e8:	08000857 	.word	0x08000857
 80007ec:	08000805 	.word	0x08000805
 80007f0:	08000819 	.word	0x08000819
 80007f4:	4a79      	ldr	r2, [pc, #484]	; (80009dc <HAL_GPIO_Init+0x2b4>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d013      	beq.n	8000822 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007fa:	e02c      	b.n	8000856 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	623b      	str	r3, [r7, #32]
          break;
 8000802:	e029      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	3304      	adds	r3, #4
 800080a:	623b      	str	r3, [r7, #32]
          break;
 800080c:	e024      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	3308      	adds	r3, #8
 8000814:	623b      	str	r3, [r7, #32]
          break;
 8000816:	e01f      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	330c      	adds	r3, #12
 800081e:	623b      	str	r3, [r7, #32]
          break;
 8000820:	e01a      	b.n	8000858 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d102      	bne.n	8000830 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800082a:	2304      	movs	r3, #4
 800082c:	623b      	str	r3, [r7, #32]
          break;
 800082e:	e013      	b.n	8000858 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	689b      	ldr	r3, [r3, #8]
 8000834:	2b01      	cmp	r3, #1
 8000836:	d105      	bne.n	8000844 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000838:	2308      	movs	r3, #8
 800083a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	611a      	str	r2, [r3, #16]
          break;
 8000842:	e009      	b.n	8000858 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000844:	2308      	movs	r3, #8
 8000846:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69fa      	ldr	r2, [r7, #28]
 800084c:	615a      	str	r2, [r3, #20]
          break;
 800084e:	e003      	b.n	8000858 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]
          break;
 8000854:	e000      	b.n	8000858 <HAL_GPIO_Init+0x130>
          break;
 8000856:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	2bff      	cmp	r3, #255	; 0xff
 800085c:	d801      	bhi.n	8000862 <HAL_GPIO_Init+0x13a>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	e001      	b.n	8000866 <HAL_GPIO_Init+0x13e>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	3304      	adds	r3, #4
 8000866:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	2bff      	cmp	r3, #255	; 0xff
 800086c:	d802      	bhi.n	8000874 <HAL_GPIO_Init+0x14c>
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	e002      	b.n	800087a <HAL_GPIO_Init+0x152>
 8000874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000876:	3b08      	subs	r3, #8
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	210f      	movs	r1, #15
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	fa01 f303 	lsl.w	r3, r1, r3
 8000888:	43db      	mvns	r3, r3
 800088a:	401a      	ands	r2, r3
 800088c:	6a39      	ldr	r1, [r7, #32]
 800088e:	693b      	ldr	r3, [r7, #16]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	431a      	orrs	r2, r3
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	f000 80b1 	beq.w	8000a0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008a8:	4b4d      	ldr	r3, [pc, #308]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a4c      	ldr	r2, [pc, #304]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b4a      	ldr	r3, [pc, #296]	; (80009e0 <HAL_GPIO_Init+0x2b8>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80008c0:	4a48      	ldr	r2, [pc, #288]	; (80009e4 <HAL_GPIO_Init+0x2bc>)
 80008c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c4:	089b      	lsrs	r3, r3, #2
 80008c6:	3302      	adds	r3, #2
 80008c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008d0:	f003 0303 	and.w	r3, r3, #3
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	220f      	movs	r2, #15
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	43db      	mvns	r3, r3
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4013      	ands	r3, r2
 80008e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_GPIO_Init+0x2c0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d013      	beq.n	8000914 <HAL_GPIO_Init+0x1ec>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a3f      	ldr	r2, [pc, #252]	; (80009ec <HAL_GPIO_Init+0x2c4>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d00d      	beq.n	8000910 <HAL_GPIO_Init+0x1e8>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a3e      	ldr	r2, [pc, #248]	; (80009f0 <HAL_GPIO_Init+0x2c8>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d007      	beq.n	800090c <HAL_GPIO_Init+0x1e4>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a3d      	ldr	r2, [pc, #244]	; (80009f4 <HAL_GPIO_Init+0x2cc>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d101      	bne.n	8000908 <HAL_GPIO_Init+0x1e0>
 8000904:	2303      	movs	r3, #3
 8000906:	e006      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000908:	2304      	movs	r3, #4
 800090a:	e004      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 800090c:	2302      	movs	r3, #2
 800090e:	e002      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000910:	2301      	movs	r3, #1
 8000912:	e000      	b.n	8000916 <HAL_GPIO_Init+0x1ee>
 8000914:	2300      	movs	r3, #0
 8000916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000918:	f002 0203 	and.w	r2, r2, #3
 800091c:	0092      	lsls	r2, r2, #2
 800091e:	4093      	lsls	r3, r2
 8000920:	68fa      	ldr	r2, [r7, #12]
 8000922:	4313      	orrs	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000926:	492f      	ldr	r1, [pc, #188]	; (80009e4 <HAL_GPIO_Init+0x2bc>)
 8000928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800092a:	089b      	lsrs	r3, r3, #2
 800092c:	3302      	adds	r3, #2
 800092e:	68fa      	ldr	r2, [r7, #12]
 8000930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800093c:	2b00      	cmp	r3, #0
 800093e:	d006      	beq.n	800094e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000940:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	492c      	ldr	r1, [pc, #176]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000946:	69bb      	ldr	r3, [r7, #24]
 8000948:	4313      	orrs	r3, r2
 800094a:	608b      	str	r3, [r1, #8]
 800094c:	e006      	b.n	800095c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	69bb      	ldr	r3, [r7, #24]
 8000954:	43db      	mvns	r3, r3
 8000956:	4928      	ldr	r1, [pc, #160]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000958:	4013      	ands	r3, r2
 800095a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000964:	2b00      	cmp	r3, #0
 8000966:	d006      	beq.n	8000976 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000968:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 800096a:	68da      	ldr	r2, [r3, #12]
 800096c:	4922      	ldr	r1, [pc, #136]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 800096e:	69bb      	ldr	r3, [r7, #24]
 8000970:	4313      	orrs	r3, r2
 8000972:	60cb      	str	r3, [r1, #12]
 8000974:	e006      	b.n	8000984 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000978:	68da      	ldr	r2, [r3, #12]
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	43db      	mvns	r3, r3
 800097e:	491e      	ldr	r1, [pc, #120]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000980:	4013      	ands	r3, r2
 8000982:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	4918      	ldr	r1, [pc, #96]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4313      	orrs	r3, r2
 800099a:	604b      	str	r3, [r1, #4]
 800099c:	e006      	b.n	80009ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800099e:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	43db      	mvns	r3, r3
 80009a6:	4914      	ldr	r1, [pc, #80]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d021      	beq.n	80009fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	490e      	ldr	r1, [pc, #56]	; (80009f8 <HAL_GPIO_Init+0x2d0>)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	4313      	orrs	r3, r2
 80009c2:	600b      	str	r3, [r1, #0]
 80009c4:	e021      	b.n	8000a0a <HAL_GPIO_Init+0x2e2>
 80009c6:	bf00      	nop
 80009c8:	10320000 	.word	0x10320000
 80009cc:	10310000 	.word	0x10310000
 80009d0:	10220000 	.word	0x10220000
 80009d4:	10210000 	.word	0x10210000
 80009d8:	10120000 	.word	0x10120000
 80009dc:	10110000 	.word	0x10110000
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010000 	.word	0x40010000
 80009e8:	40010800 	.word	0x40010800
 80009ec:	40010c00 	.word	0x40010c00
 80009f0:	40011000 	.word	0x40011000
 80009f4:	40011400 	.word	0x40011400
 80009f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009fc:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <HAL_GPIO_Init+0x304>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	43db      	mvns	r3, r3
 8000a04:	4909      	ldr	r1, [pc, #36]	; (8000a2c <HAL_GPIO_Init+0x304>)
 8000a06:	4013      	ands	r3, r2
 8000a08:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	fa22 f303 	lsr.w	r3, r2, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	f47f ae8e 	bne.w	800073c <HAL_GPIO_Init+0x14>
  }
}
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	372c      	adds	r7, #44	; 0x2c
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr
 8000a2c:	40010400 	.word	0x40010400

08000a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	807b      	strh	r3, [r7, #2]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a40:	787b      	ldrb	r3, [r7, #1]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a46:	887a      	ldrh	r2, [r7, #2]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a4c:	e003      	b.n	8000a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a4e:	887b      	ldrh	r3, [r7, #2]
 8000a50:	041a      	lsls	r2, r3, #16
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	611a      	str	r2, [r3, #16]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr

08000a60 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	601a      	str	r2, [r3, #0]
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	420e0020 	.word	0x420e0020

08000a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
 8000a88:	e272      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f000 8087 	beq.w	8000ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a98:	4b92      	ldr	r3, [pc, #584]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 030c 	and.w	r3, r3, #12
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d00c      	beq.n	8000abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000aa4:	4b8f      	ldr	r3, [pc, #572]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	f003 030c 	and.w	r3, r3, #12
 8000aac:	2b08      	cmp	r3, #8
 8000aae:	d112      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x5e>
 8000ab0:	4b8c      	ldr	r3, [pc, #560]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000abc:	d10b      	bne.n	8000ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000abe:	4b89      	ldr	r3, [pc, #548]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d06c      	beq.n	8000ba4 <HAL_RCC_OscConfig+0x12c>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d168      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e24c      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ade:	d106      	bne.n	8000aee <HAL_RCC_OscConfig+0x76>
 8000ae0:	4b80      	ldr	r3, [pc, #512]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a7f      	ldr	r2, [pc, #508]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e02e      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d10c      	bne.n	8000b10 <HAL_RCC_OscConfig+0x98>
 8000af6:	4b7b      	ldr	r3, [pc, #492]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a7a      	ldr	r2, [pc, #488]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b78      	ldr	r3, [pc, #480]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a77      	ldr	r2, [pc, #476]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e01d      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b18:	d10c      	bne.n	8000b34 <HAL_RCC_OscConfig+0xbc>
 8000b1a:	4b72      	ldr	r3, [pc, #456]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a71      	ldr	r2, [pc, #452]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b24:	6013      	str	r3, [r2, #0]
 8000b26:	4b6f      	ldr	r3, [pc, #444]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a6e      	ldr	r2, [pc, #440]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e00b      	b.n	8000b4c <HAL_RCC_OscConfig+0xd4>
 8000b34:	4b6b      	ldr	r3, [pc, #428]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a6a      	ldr	r2, [pc, #424]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b68      	ldr	r3, [pc, #416]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a67      	ldr	r2, [pc, #412]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b54:	f7ff fcfa 	bl	800054c <HAL_GetTick>
 8000b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5a:	e008      	b.n	8000b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fcf6 	bl	800054c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	693b      	ldr	r3, [r7, #16]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	2b64      	cmp	r3, #100	; 0x64
 8000b68:	d901      	bls.n	8000b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e200      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b6e:	4b5d      	ldr	r3, [pc, #372]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d0f0      	beq.n	8000b5c <HAL_RCC_OscConfig+0xe4>
 8000b7a:	e014      	b.n	8000ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b7c:	f7ff fce6 	bl	800054c <HAL_GetTick>
 8000b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b82:	e008      	b.n	8000b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b84:	f7ff fce2 	bl	800054c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	693b      	ldr	r3, [r7, #16]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b64      	cmp	r3, #100	; 0x64
 8000b90:	d901      	bls.n	8000b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b92:	2303      	movs	r3, #3
 8000b94:	e1ec      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b96:	4b53      	ldr	r3, [pc, #332]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f0      	bne.n	8000b84 <HAL_RCC_OscConfig+0x10c>
 8000ba2:	e000      	b.n	8000ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0302 	and.w	r3, r3, #2
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d063      	beq.n	8000c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000bb2:	4b4c      	ldr	r3, [pc, #304]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f003 030c 	and.w	r3, r3, #12
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d00b      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bbe:	4b49      	ldr	r3, [pc, #292]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b08      	cmp	r3, #8
 8000bc8:	d11c      	bne.n	8000c04 <HAL_RCC_OscConfig+0x18c>
 8000bca:	4b46      	ldr	r3, [pc, #280]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d116      	bne.n	8000c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd6:	4b43      	ldr	r3, [pc, #268]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d005      	beq.n	8000bee <HAL_RCC_OscConfig+0x176>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d001      	beq.n	8000bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e1c0      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bee:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	695b      	ldr	r3, [r3, #20]
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4939      	ldr	r1, [pc, #228]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c02:	e03a      	b.n	8000c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	691b      	ldr	r3, [r3, #16]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d020      	beq.n	8000c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c0c:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HAL_RCC_OscConfig+0x270>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c12:	f7ff fc9b 	bl	800054c <HAL_GetTick>
 8000c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c18:	e008      	b.n	8000c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c1a:	f7ff fc97 	bl	800054c <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d901      	bls.n	8000c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	e1a1      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f003 0302 	and.w	r3, r3, #2
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d0f0      	beq.n	8000c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c38:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	695b      	ldr	r3, [r3, #20]
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	4927      	ldr	r1, [pc, #156]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	600b      	str	r3, [r1, #0]
 8000c4c:	e015      	b.n	8000c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c4e:	4b26      	ldr	r3, [pc, #152]	; (8000ce8 <HAL_RCC_OscConfig+0x270>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fc7a 	bl	800054c <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c5c:	f7ff fc76 	bl	800054c <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e180      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 0308 	and.w	r3, r3, #8
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d03a      	beq.n	8000cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d019      	beq.n	8000cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_RCC_OscConfig+0x274>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c94:	f7ff fc5a 	bl	800054c <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c9c:	f7ff fc56 	bl	800054c <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e160      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cae:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d0f0      	beq.n	8000c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 faba 	bl	8001234 <RCC_Delay>
 8000cc0:	e01c      	b.n	8000cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc2:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <HAL_RCC_OscConfig+0x274>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc8:	f7ff fc40 	bl	800054c <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cce:	e00f      	b.n	8000cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cd0:	f7ff fc3c 	bl	800054c <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d908      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e146      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	42420000 	.word	0x42420000
 8000cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cf0:	4b92      	ldr	r3, [pc, #584]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf4:	f003 0302 	and.w	r3, r3, #2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1e9      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f003 0304 	and.w	r3, r3, #4
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80a6 	beq.w	8000e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d0e:	4b8b      	ldr	r3, [pc, #556]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10d      	bne.n	8000d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b88      	ldr	r3, [pc, #544]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a87      	ldr	r2, [pc, #540]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b85      	ldr	r3, [pc, #532]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	60bb      	str	r3, [r7, #8]
 8000d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d36:	4b82      	ldr	r3, [pc, #520]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d118      	bne.n	8000d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d42:	4b7f      	ldr	r3, [pc, #508]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a7e      	ldr	r2, [pc, #504]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d4e:	f7ff fbfd 	bl	800054c <HAL_GetTick>
 8000d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	e008      	b.n	8000d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d56:	f7ff fbf9 	bl	800054c <HAL_GetTick>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	2b64      	cmp	r3, #100	; 0x64
 8000d62:	d901      	bls.n	8000d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d64:	2303      	movs	r3, #3
 8000d66:	e103      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d68:	4b75      	ldr	r3, [pc, #468]	; (8000f40 <HAL_RCC_OscConfig+0x4c8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0f0      	beq.n	8000d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d106      	bne.n	8000d8a <HAL_RCC_OscConfig+0x312>
 8000d7c:	4b6f      	ldr	r3, [pc, #444]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	4a6e      	ldr	r2, [pc, #440]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6213      	str	r3, [r2, #32]
 8000d88:	e02d      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0x334>
 8000d92:	4b6a      	ldr	r3, [pc, #424]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d94:	6a1b      	ldr	r3, [r3, #32]
 8000d96:	4a69      	ldr	r2, [pc, #420]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000d98:	f023 0301 	bic.w	r3, r3, #1
 8000d9c:	6213      	str	r3, [r2, #32]
 8000d9e:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	4a66      	ldr	r2, [pc, #408]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000da4:	f023 0304 	bic.w	r3, r3, #4
 8000da8:	6213      	str	r3, [r2, #32]
 8000daa:	e01c      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	2b05      	cmp	r3, #5
 8000db2:	d10c      	bne.n	8000dce <HAL_RCC_OscConfig+0x356>
 8000db4:	4b61      	ldr	r3, [pc, #388]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000db6:	6a1b      	ldr	r3, [r3, #32]
 8000db8:	4a60      	ldr	r2, [pc, #384]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	6213      	str	r3, [r2, #32]
 8000dc0:	4b5e      	ldr	r3, [pc, #376]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dc2:	6a1b      	ldr	r3, [r3, #32]
 8000dc4:	4a5d      	ldr	r2, [pc, #372]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6213      	str	r3, [r2, #32]
 8000dcc:	e00b      	b.n	8000de6 <HAL_RCC_OscConfig+0x36e>
 8000dce:	4b5b      	ldr	r3, [pc, #364]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a5a      	ldr	r2, [pc, #360]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	f023 0301 	bic.w	r3, r3, #1
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000de0:	f023 0304 	bic.w	r3, r3, #4
 8000de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d015      	beq.n	8000e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dee:	f7ff fbad 	bl	800054c <HAL_GetTick>
 8000df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000df4:	e00a      	b.n	8000e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000df6:	f7ff fba9 	bl	800054c <HAL_GetTick>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	1ad3      	subs	r3, r2, r3
 8000e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e0b1      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	6a1b      	ldr	r3, [r3, #32]
 8000e10:	f003 0302 	and.w	r3, r3, #2
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0ee      	beq.n	8000df6 <HAL_RCC_OscConfig+0x37e>
 8000e18:	e014      	b.n	8000e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fb97 	bl	800054c <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e20:	e00a      	b.n	8000e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e22:	f7ff fb93 	bl	800054c <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d901      	bls.n	8000e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e34:	2303      	movs	r3, #3
 8000e36:	e09b      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e38:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e3a:	6a1b      	ldr	r3, [r3, #32]
 8000e3c:	f003 0302 	and.w	r3, r3, #2
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d1ee      	bne.n	8000e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e44:	7dfb      	ldrb	r3, [r7, #23]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d105      	bne.n	8000e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e4a:	4b3c      	ldr	r3, [pc, #240]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a3b      	ldr	r2, [pc, #236]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 8087 	beq.w	8000f6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 030c 	and.w	r3, r3, #12
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d061      	beq.n	8000f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	69db      	ldr	r3, [r3, #28]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d146      	bne.n	8000f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e74:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fb67 	bl	800054c <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e82:	f7ff fb63 	bl	800054c <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e06d      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e94:	4b29      	ldr	r3, [pc, #164]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f0      	bne.n	8000e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a1b      	ldr	r3, [r3, #32]
 8000ea4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea8:	d108      	bne.n	8000ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eaa:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	4921      	ldr	r1, [pc, #132]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a19      	ldr	r1, [r3, #32]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	430b      	orrs	r3, r1
 8000ece:	491b      	ldr	r1, [pc, #108]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eda:	f7ff fb37 	bl	800054c <HAL_GetTick>
 8000ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ee0:	e008      	b.n	8000ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee2:	f7ff fb33 	bl	800054c <HAL_GetTick>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	1ad3      	subs	r3, r2, r3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d901      	bls.n	8000ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	e03d      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d0f0      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x46a>
 8000f00:	e035      	b.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_RCC_OscConfig+0x4cc>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fb20 	bl	800054c <HAL_GetTick>
 8000f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f0e:	e008      	b.n	8000f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f10:	f7ff fb1c 	bl	800054c <HAL_GetTick>
 8000f14:	4602      	mov	r2, r0
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	1ad3      	subs	r3, r2, r3
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	d901      	bls.n	8000f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e026      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f22:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_RCC_OscConfig+0x4c4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1f0      	bne.n	8000f10 <HAL_RCC_OscConfig+0x498>
 8000f2e:	e01e      	b.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d107      	bne.n	8000f48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e019      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	40007000 	.word	0x40007000
 8000f44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f48:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_RCC_OscConfig+0x500>)
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d106      	bne.n	8000f6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d001      	beq.n	8000f6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0d0      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f90:	4b6a      	ldr	r3, [pc, #424]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d910      	bls.n	8000fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	4b67      	ldr	r3, [pc, #412]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f023 0207 	bic.w	r2, r3, #7
 8000fa6:	4965      	ldr	r1, [pc, #404]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fae:	4b63      	ldr	r3, [pc, #396]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	683a      	ldr	r2, [r7, #0]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d001      	beq.n	8000fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0b8      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d020      	beq.n	800100e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d005      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd8:	4b59      	ldr	r3, [pc, #356]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	4a58      	ldr	r2, [pc, #352]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0308 	and.w	r3, r3, #8
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d005      	beq.n	8000ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ff0:	4b53      	ldr	r3, [pc, #332]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	4a52      	ldr	r2, [pc, #328]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8000ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ffc:	4b50      	ldr	r3, [pc, #320]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	494d      	ldr	r1, [pc, #308]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	4313      	orrs	r3, r2
 800100c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	2b00      	cmp	r3, #0
 8001018:	d040      	beq.n	800109c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d107      	bne.n	8001032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b47      	ldr	r3, [pc, #284]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d115      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e07f      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b02      	cmp	r3, #2
 8001038:	d107      	bne.n	800104a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	4b41      	ldr	r3, [pc, #260]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e073      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b3d      	ldr	r3, [pc, #244]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e06b      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105a:	4b39      	ldr	r3, [pc, #228]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f023 0203 	bic.w	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4936      	ldr	r1, [pc, #216]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001068:	4313      	orrs	r3, r2
 800106a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800106c:	f7ff fa6e 	bl	800054c <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	e00a      	b.n	800108a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001074:	f7ff fa6a 	bl	800054c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e053      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 020c 	and.w	r2, r3, #12
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	429a      	cmp	r2, r3
 800109a:	d1eb      	bne.n	8001074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d210      	bcs.n	80010cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b24      	ldr	r3, [pc, #144]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 0207 	bic.w	r2, r3, #7
 80010b2:	4922      	ldr	r1, [pc, #136]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e032      	b.n	8001132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d008      	beq.n	80010ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	4916      	ldr	r1, [pc, #88]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010e6:	4313      	orrs	r3, r2
 80010e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d009      	beq.n	800110a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	4313      	orrs	r3, r2
 8001108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800110a:	f000 f821 	bl	8001150 <HAL_RCC_GetSysClockFreq>
 800110e:	4602      	mov	r2, r0
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	490a      	ldr	r1, [pc, #40]	; (8001144 <HAL_RCC_ClockConfig+0x1c8>)
 800111c:	5ccb      	ldrb	r3, [r1, r3]
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	4a09      	ldr	r2, [pc, #36]	; (8001148 <HAL_RCC_ClockConfig+0x1cc>)
 8001124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_RCC_ClockConfig+0x1d0>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f9cc 	bl	80004c8 <HAL_InitTick>

  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40022000 	.word	0x40022000
 8001140:	40021000 	.word	0x40021000
 8001144:	08002108 	.word	0x08002108
 8001148:	20000000 	.word	0x20000000
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d002      	beq.n	8001180 <HAL_RCC_GetSysClockFreq+0x30>
 800117a:	2b08      	cmp	r3, #8
 800117c:	d003      	beq.n	8001186 <HAL_RCC_GetSysClockFreq+0x36>
 800117e:	e027      	b.n	80011d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001182:	613b      	str	r3, [r7, #16]
      break;
 8001184:	e027      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	0c9b      	lsrs	r3, r3, #18
 800118a:	f003 030f 	and.w	r3, r3, #15
 800118e:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8001190:	5cd3      	ldrb	r3, [r2, r3]
 8001192:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d010      	beq.n	80011c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	0c5b      	lsrs	r3, r3, #17
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	4a11      	ldr	r2, [pc, #68]	; (80011f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
 80011ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0d      	ldr	r2, [pc, #52]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80011b2:	fb03 f202 	mul.w	r2, r3, r2
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	e004      	b.n	80011ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011c4:	fb02 f303 	mul.w	r3, r2, r3
 80011c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	613b      	str	r3, [r7, #16]
      break;
 80011ce:	e002      	b.n	80011d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80011d0:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80011d2:	613b      	str	r3, [r7, #16]
      break;
 80011d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011d6:	693b      	ldr	r3, [r7, #16]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	007a1200 	.word	0x007a1200
 80011ec:	08002120 	.word	0x08002120
 80011f0:	08002130 	.word	0x08002130
 80011f4:	003d0900 	.word	0x003d0900

080011f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80011fc:	4b02      	ldr	r3, [pc, #8]	; (8001208 <HAL_RCC_GetHCLKFreq+0x10>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000000 	.word	0x20000000

0800120c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001210:	f7ff fff2 	bl	80011f8 <HAL_RCC_GetHCLKFreq>
 8001214:	4602      	mov	r2, r0
 8001216:	4b05      	ldr	r3, [pc, #20]	; (800122c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	0adb      	lsrs	r3, r3, #11
 800121c:	f003 0307 	and.w	r3, r3, #7
 8001220:	4903      	ldr	r1, [pc, #12]	; (8001230 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001222:	5ccb      	ldrb	r3, [r1, r3]
 8001224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001228:	4618      	mov	r0, r3
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40021000 	.word	0x40021000
 8001230:	08002118 	.word	0x08002118

08001234 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <RCC_Delay+0x34>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <RCC_Delay+0x38>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0a5b      	lsrs	r3, r3, #9
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001250:	bf00      	nop
  }
  while (Delay --);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1e5a      	subs	r2, r3, #1
 8001256:	60fa      	str	r2, [r7, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d1f9      	bne.n	8001250 <RCC_Delay+0x1c>
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000000 	.word	0x20000000
 800126c:	10624dd3 	.word	0x10624dd3

08001270 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d07d      	beq.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001290:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001292:	69db      	ldr	r3, [r3, #28]
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d10d      	bne.n	80012b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	4a4b      	ldr	r2, [pc, #300]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a6:	61d3      	str	r3, [r2, #28]
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b0:	60bb      	str	r3, [r7, #8]
 80012b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012b4:	2301      	movs	r3, #1
 80012b6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b46      	ldr	r3, [pc, #280]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d118      	bne.n	80012f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012c4:	4b43      	ldr	r3, [pc, #268]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a42      	ldr	r2, [pc, #264]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80012ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012d0:	f7ff f93c 	bl	800054c <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	e008      	b.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d8:	f7ff f938 	bl	800054c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b64      	cmp	r3, #100	; 0x64
 80012e4:	d901      	bls.n	80012ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e06d      	b.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80012fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d02e      	beq.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d027      	beq.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001314:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800131c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001320:	2201      	movs	r2, #1
 8001322:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001324:	4b2c      	ldr	r3, [pc, #176]	; (80013d8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800132a:	4a29      	ldr	r2, [pc, #164]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d014      	beq.n	8001364 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff f907 	bl	800054c <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	e00a      	b.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001342:	f7ff f903 	bl	800054c <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001350:	4293      	cmp	r3, r2
 8001352:	d901      	bls.n	8001358 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e036      	b.n	80013c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d0ee      	beq.n	8001342 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4917      	ldr	r1, [pc, #92]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001372:	4313      	orrs	r3, r2
 8001374:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d105      	bne.n	8001388 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800137e:	69db      	ldr	r3, [r3, #28]
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001386:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001394:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	490b      	ldr	r1, [pc, #44]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d008      	beq.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	4904      	ldr	r1, [pc, #16]	; (80013d0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40007000 	.word	0x40007000
 80013d8:	42420440 	.word	0x42420440

080013dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	2300      	movs	r3, #0
 80013f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b10      	cmp	r3, #16
 80013fc:	d00a      	beq.n	8001414 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b10      	cmp	r3, #16
 8001402:	f200 808a 	bhi.w	800151a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d045      	beq.n	8001498 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d075      	beq.n	80014fe <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001412:	e082      	b.n	800151a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001414:	4b46      	ldr	r3, [pc, #280]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d07b      	beq.n	800151e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	0c9b      	lsrs	r3, r3, #18
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	4a41      	ldr	r2, [pc, #260]	; (8001534 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001430:	5cd3      	ldrb	r3, [r2, r3]
 8001432:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d015      	beq.n	800146a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0c5b      	lsrs	r3, r3, #17
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	4a3b      	ldr	r2, [pc, #236]	; (8001538 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800144a:	5cd3      	ldrb	r3, [r2, r3]
 800144c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00d      	beq.n	8001474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001458:	4a38      	ldr	r2, [pc, #224]	; (800153c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	e004      	b.n	8001474 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4a34      	ldr	r2, [pc, #208]	; (8001540 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001474:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800147c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001480:	d102      	bne.n	8001488 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	61bb      	str	r3, [r7, #24]
      break;
 8001486:	e04a      	b.n	800151e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	085b      	lsrs	r3, r3, #1
 8001494:	61bb      	str	r3, [r7, #24]
      break;
 8001496:	e042      	b.n	800151e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001498:	4b25      	ldr	r3, [pc, #148]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a8:	d108      	bne.n	80014bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80014b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e01f      	b.n	80014fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014c6:	d109      	bne.n	80014dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80014ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80014d4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80014d8:	61bb      	str	r3, [r7, #24]
 80014da:	e00f      	b.n	80014fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80014e6:	d11c      	bne.n	8001522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d016      	beq.n	8001522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80014f4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80014f8:	61bb      	str	r3, [r7, #24]
      break;
 80014fa:	e012      	b.n	8001522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80014fc:	e011      	b.n	8001522 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80014fe:	f7ff fe85 	bl	800120c <HAL_RCC_GetPCLK2Freq>
 8001502:	4602      	mov	r2, r0
 8001504:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	0b9b      	lsrs	r3, r3, #14
 800150a:	f003 0303 	and.w	r3, r3, #3
 800150e:	3301      	adds	r3, #1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	fbb2 f3f3 	udiv	r3, r2, r3
 8001516:	61bb      	str	r3, [r7, #24]
      break;
 8001518:	e004      	b.n	8001524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800151a:	bf00      	nop
 800151c:	e002      	b.n	8001524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800151e:	bf00      	nop
 8001520:	e000      	b.n	8001524 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001522:	bf00      	nop
    }
  }
  return (frequency);
 8001524:	69bb      	ldr	r3, [r7, #24]
}
 8001526:	4618      	mov	r0, r3
 8001528:	3720      	adds	r7, #32
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	08002134 	.word	0x08002134
 8001538:	08002144 	.word	0x08002144
 800153c:	007a1200 	.word	0x007a1200
 8001540:	003d0900 	.word	0x003d0900
 8001544:	aaaaaaab 	.word	0xaaaaaaab

08001548 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e07a      	b.n	8001654 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7c5b      	ldrb	r3, [r3, #17]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe ff1c 	bl	80003ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 faea 	bl	8001b54 <HAL_RTC_WaitForSynchro>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2204      	movs	r2, #4
 800158a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e061      	b.n	8001654 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 fba3 	bl	8001cdc <RTC_EnterInitMode>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2204      	movs	r2, #4
 80015a0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e056      	b.n	8001654 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0207 	bic.w	r2, r2, #7
 80015b4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d005      	beq.n	80015ca <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80015be:	4b27      	ldr	r3, [pc, #156]	; (800165c <HAL_RTC_Init+0x114>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_RTC_Init+0x114>)
 80015c4:	f023 0301 	bic.w	r3, r3, #1
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80015ca:	4b24      	ldr	r3, [pc, #144]	; (800165c <HAL_RTC_Init+0x114>)
 80015cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ce:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4921      	ldr	r1, [pc, #132]	; (800165c <HAL_RTC_Init+0x114>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d003      	beq.n	80015ee <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	e00e      	b.n	800160c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f7ff fef4 	bl	80013dc <HAL_RCCEx_GetPeriphCLKFreq>
 80015f4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d104      	bne.n	8001606 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2204      	movs	r2, #4
 8001600:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e026      	b.n	8001654 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3b01      	subs	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	0c1a      	lsrs	r2, r3, #16
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f002 020f 	and.w	r2, r2, #15
 8001618:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	b292      	uxth	r2, r2
 8001622:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f000 fb81 	bl	8001d2c <RTC_ExitInitMode>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d004      	beq.n	800163a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2204      	movs	r2, #4
 8001634:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00c      	b.n	8001654 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001652:	2300      	movs	r3, #0
  }
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	40006c00 	.word	0x40006c00

08001660 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	2300      	movs	r3, #0
 8001672:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_RTC_SetTime+0x20>
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d101      	bne.n	8001684 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e080      	b.n	8001786 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	7c1b      	ldrb	r3, [r3, #16]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_RTC_SetTime+0x30>
 800168c:	2302      	movs	r3, #2
 800168e:	e07a      	b.n	8001786 <HAL_RTC_SetTime+0x126>
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	2201      	movs	r2, #1
 8001694:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2202      	movs	r2, #2
 800169a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d113      	bne.n	80016ca <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016ac:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	785b      	ldrb	r3, [r3, #1]
 80016b4:	4619      	mov	r1, r3
 80016b6:	460b      	mov	r3, r1
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	1a5b      	subs	r3, r3, r1
 80016bc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80016be:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80016c0:	68ba      	ldr	r2, [r7, #8]
 80016c2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80016c4:	4413      	add	r3, r2
 80016c6:	617b      	str	r3, [r7, #20]
 80016c8:	e01e      	b.n	8001708 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fb71 	bl	8001db6 <RTC_Bcd2ToByte>
 80016d4:	4603      	mov	r3, r0
 80016d6:	461a      	mov	r2, r3
 80016d8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80016dc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	785b      	ldrb	r3, [r3, #1]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f000 fb66 	bl	8001db6 <RTC_Bcd2ToByte>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80016f6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fb5a 	bl	8001db6 <RTC_Bcd2ToByte>
 8001702:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001704:	4423      	add	r3, r4
 8001706:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001708:	6979      	ldr	r1, [r7, #20]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fa7f 	bl	8001c0e <RTC_WriteTimeCounter>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2204      	movs	r2, #4
 800171a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2200      	movs	r2, #0
 8001720:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e02f      	b.n	8001786 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0205 	bic.w	r2, r2, #5
 8001734:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001736:	68f8      	ldr	r0, [r7, #12]
 8001738:	f000 fa90 	bl	8001c5c <RTC_ReadAlarmCounter>
 800173c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001744:	d018      	beq.n	8001778 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001746:	693a      	ldr	r2, [r7, #16]
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	429a      	cmp	r2, r3
 800174c:	d214      	bcs.n	8001778 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001754:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001758:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800175a:	6939      	ldr	r1, [r7, #16]
 800175c:	68f8      	ldr	r0, [r7, #12]
 800175e:	f000 fa96 	bl	8001c8e <RTC_WriteAlarmCounter>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d007      	beq.n	8001778 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2204      	movs	r2, #4
 800176c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e006      	b.n	8001786 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2201      	movs	r2, #1
 800177c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2200      	movs	r2, #0
 8001782:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001784:	2300      	movs	r3, #0
  }
}
 8001786:	4618      	mov	r0, r3
 8001788:	371c      	adds	r7, #28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
	...

08001790 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <HAL_RTC_GetTime+0x28>
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b5      	b.n	8001928 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0ac      	b.n	8001928 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80017ce:	68f8      	ldr	r0, [r7, #12]
 80017d0:	f000 f9ed 	bl	8001bae <RTC_ReadTimeCounter>
 80017d4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	4a55      	ldr	r2, [pc, #340]	; (8001930 <HAL_RTC_GetTime+0x1a0>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	0adb      	lsrs	r3, r3, #11
 80017e0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4b52      	ldr	r3, [pc, #328]	; (8001930 <HAL_RTC_GetTime+0x1a0>)
 80017e6:	fba3 1302 	umull	r1, r3, r3, r2
 80017ea:	0adb      	lsrs	r3, r3, #11
 80017ec:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	4a4f      	ldr	r2, [pc, #316]	; (8001934 <HAL_RTC_GetTime+0x1a4>)
 80017f8:	fba2 2303 	umull	r2, r3, r2, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	4a4a      	ldr	r2, [pc, #296]	; (8001930 <HAL_RTC_GetTime+0x1a0>)
 8001808:	fba2 1203 	umull	r1, r2, r2, r3
 800180c:	0ad2      	lsrs	r2, r2, #11
 800180e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001812:	fb01 f202 	mul.w	r2, r1, r2
 8001816:	1a9a      	subs	r2, r3, r2
 8001818:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_RTC_GetTime+0x1a4>)
 800181a:	fba3 1302 	umull	r1, r3, r3, r2
 800181e:	0959      	lsrs	r1, r3, #5
 8001820:	460b      	mov	r3, r1
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a5b      	subs	r3, r3, r1
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	1ad1      	subs	r1, r2, r3
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2b17      	cmp	r3, #23
 8001834:	d955      	bls.n	80018e2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4a3f      	ldr	r2, [pc, #252]	; (8001938 <HAL_RTC_GetTime+0x1a8>)
 800183a:	fba2 2303 	umull	r2, r3, r2, r3
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001842:	6939      	ldr	r1, [r7, #16]
 8001844:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_RTC_GetTime+0x1a8>)
 8001846:	fba3 2301 	umull	r2, r3, r3, r1
 800184a:	091a      	lsrs	r2, r3, #4
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	1aca      	subs	r2, r1, r3
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800185c:	68f8      	ldr	r0, [r7, #12]
 800185e:	f000 f9fd 	bl	8001c5c <RTC_ReadAlarmCounter>
 8001862:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186a:	d008      	beq.n	800187e <HAL_RTC_GetTime+0xee>
 800186c:	69fa      	ldr	r2, [r7, #28]
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	429a      	cmp	r2, r3
 8001872:	d904      	bls.n	800187e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	e002      	b.n	8001884 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	4a2d      	ldr	r2, [pc, #180]	; (800193c <HAL_RTC_GetTime+0x1ac>)
 8001888:	fb02 f303 	mul.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001892:	69b9      	ldr	r1, [r7, #24]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 f9ba 	bl	8001c0e <RTC_WriteTimeCounter>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e041      	b.n	8001928 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018aa:	d00c      	beq.n	80018c6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4413      	add	r3, r2
 80018b2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80018b4:	69f9      	ldr	r1, [r7, #28]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f000 f9e9 	bl	8001c8e <RTC_WriteAlarmCounter>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00a      	beq.n	80018d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e030      	b.n	8001928 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80018c6:	69f9      	ldr	r1, [r7, #28]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f9e0 	bl	8001c8e <RTC_WriteAlarmCounter>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e027      	b.n	8001928 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80018d8:	6979      	ldr	r1, [r7, #20]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa88 	bl	8001df0 <RTC_DateUpdate>
 80018e0:	e003      	b.n	80018ea <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01a      	beq.n	8001926 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa41 	bl	8001d7c <RTC_ByteToBcd2>
 80018fa:	4603      	mov	r3, r0
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	785b      	ldrb	r3, [r3, #1]
 8001906:	4618      	mov	r0, r3
 8001908:	f000 fa38 	bl	8001d7c <RTC_ByteToBcd2>
 800190c:	4603      	mov	r3, r0
 800190e:	461a      	mov	r2, r3
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	789b      	ldrb	r3, [r3, #2]
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fa2f 	bl	8001d7c <RTC_ByteToBcd2>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	91a2b3c5 	.word	0x91a2b3c5
 8001934:	88888889 	.word	0x88888889
 8001938:	aaaaaaab 	.word	0xaaaaaaab
 800193c:	00015180 	.word	0x00015180

08001940 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	2300      	movs	r3, #0
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d002      	beq.n	8001964 <HAL_RTC_SetDate+0x24>
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e097      	b.n	8001a98 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	7c1b      	ldrb	r3, [r3, #16]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d101      	bne.n	8001974 <HAL_RTC_SetDate+0x34>
 8001970:	2302      	movs	r3, #2
 8001972:	e091      	b.n	8001a98 <HAL_RTC_SetDate+0x158>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2201      	movs	r2, #1
 8001978:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2202      	movs	r2, #2
 800197e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d10c      	bne.n	80019a0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	78da      	ldrb	r2, [r3, #3]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	785a      	ldrb	r2, [r3, #1]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	789a      	ldrb	r2, [r3, #2]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	739a      	strb	r2, [r3, #14]
 800199e:	e01a      	b.n	80019d6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	78db      	ldrb	r3, [r3, #3]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 fa06 	bl	8001db6 <RTC_Bcd2ToByte>
 80019aa:	4603      	mov	r3, r0
 80019ac:	461a      	mov	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	785b      	ldrb	r3, [r3, #1]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f000 f9fd 	bl	8001db6 <RTC_Bcd2ToByte>
 80019bc:	4603      	mov	r3, r0
 80019be:	461a      	mov	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	789b      	ldrb	r3, [r3, #2]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f9f4 	bl	8001db6 <RTC_Bcd2ToByte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	7bdb      	ldrb	r3, [r3, #15]
 80019da:	4618      	mov	r0, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	7b59      	ldrb	r1, [r3, #13]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	7b9b      	ldrb	r3, [r3, #14]
 80019e4:	461a      	mov	r2, r3
 80019e6:	f000 fadf 	bl	8001fa8 <RTC_WeekDayNum>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	7b1a      	ldrb	r2, [r3, #12]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f000 f8d7 	bl	8001bae <RTC_ReadTimeCounter>
 8001a00:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4a26      	ldr	r2, [pc, #152]	; (8001aa0 <HAL_RTC_SetDate+0x160>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0adb      	lsrs	r3, r3, #11
 8001a0c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b18      	cmp	r3, #24
 8001a12:	d93a      	bls.n	8001a8a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	4a23      	ldr	r2, [pc, #140]	; (8001aa4 <HAL_RTC_SetDate+0x164>)
 8001a18:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_RTC_SetDate+0x168>)
 8001a20:	fb02 f303 	mul.w	r3, r2, r3
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a2a:	69f9      	ldr	r1, [r7, #28]
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f000 f8ee 	bl	8001c0e <RTC_WriteTimeCounter>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e027      	b.n	8001a98 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 f907 	bl	8001c5c <RTC_ReadAlarmCounter>
 8001a4e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d018      	beq.n	8001a8a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d214      	bcs.n	8001a8a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001a66:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001a6a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a6c:	69b9      	ldr	r1, [r7, #24]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f90d 	bl	8001c8e <RTC_WriteAlarmCounter>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e006      	b.n	8001a98 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2200      	movs	r2, #0
 8001a94:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3720      	adds	r7, #32
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	91a2b3c5 	.word	0x91a2b3c5
 8001aa4:	aaaaaaab 	.word	0xaaaaaaab
 8001aa8:	00015180 	.word	0x00015180

08001aac <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8001ab8:	f107 0314 	add.w	r3, r7, #20
 8001abc:	2100      	movs	r1, #0
 8001abe:	460a      	mov	r2, r1
 8001ac0:	801a      	strh	r2, [r3, #0]
 8001ac2:	460a      	mov	r2, r1
 8001ac4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d002      	beq.n	8001ad2 <HAL_RTC_GetDate+0x26>
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e03a      	b.n	8001b4c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	4619      	mov	r1, r3
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fe56 	bl	8001790 <HAL_RTC_GetTime>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e02e      	b.n	8001b4c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	7b1a      	ldrb	r2, [r3, #12]
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	7bda      	ldrb	r2, [r3, #15]
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	7b5a      	ldrb	r2, [r3, #13]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	7b9a      	ldrb	r2, [r3, #14]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01a      	beq.n	8001b4a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	78db      	ldrb	r3, [r3, #3]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f92f 	bl	8001d7c <RTC_ByteToBcd2>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	785b      	ldrb	r3, [r3, #1]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f926 	bl	8001d7c <RTC_ByteToBcd2>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	789b      	ldrb	r3, [r3, #2]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f91d 	bl	8001d7c <RTC_ByteToBcd2>
 8001b42:	4603      	mov	r3, r0
 8001b44:	461a      	mov	r2, r3
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e01d      	b.n	8001ba6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0208 	bic.w	r2, r2, #8
 8001b78:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001b7a:	f7fe fce7 	bl	800054c <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b80:	e009      	b.n	8001b96 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001b82:	f7fe fce3 	bl	800054c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b90:	d901      	bls.n	8001b96 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e007      	b.n	8001ba6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0308 	and.w	r3, r3, #8
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b087      	sub	sp, #28
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	827b      	strh	r3, [r7, #18]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	823b      	strh	r3, [r7, #16]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69db      	ldr	r3, [r3, #28]
 8001bd4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001bde:	8a7a      	ldrh	r2, [r7, #18]
 8001be0:	8a3b      	ldrh	r3, [r7, #16]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d008      	beq.n	8001bf8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001be6:	8a3b      	ldrh	r3, [r7, #16]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	617b      	str	r3, [r7, #20]
 8001bf6:	e004      	b.n	8001c02 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	041a      	lsls	r2, r3, #16
 8001bfc:	89fb      	ldrh	r3, [r7, #14]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001c02:	697b      	ldr	r3, [r7, #20]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	371c      	adds	r7, #28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr

08001c0e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b084      	sub	sp, #16
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
 8001c16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f85d 	bl	8001cdc <RTC_EnterInitMode>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e011      	b.n	8001c52 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	0c12      	lsrs	r2, r2, #16
 8001c36:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	b292      	uxth	r2, r2
 8001c40:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f872 	bl	8001d2c <RTC_ExitInitMode>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	81fb      	strh	r3, [r7, #14]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001c7c:	89fb      	ldrh	r3, [r7, #14]
 8001c7e:	041a      	lsls	r2, r3, #16
 8001c80:	89bb      	ldrh	r3, [r7, #12]
 8001c82:	4313      	orrs	r3, r2
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr

08001c8e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 f81d 	bl	8001cdc <RTC_EnterInitMode>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	e011      	b.n	8001cd2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	0c12      	lsrs	r2, r2, #16
 8001cb6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 f832 	bl	8001d2c <RTC_ExitInitMode>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001ce8:	f7fe fc30 	bl	800054c <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001cee:	e009      	b.n	8001d04 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001cf0:	f7fe fc2c 	bl	800054c <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cfe:	d901      	bls.n	8001d04 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e00f      	b.n	8001d24 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ee      	beq.n	8001cf0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0210 	orr.w	r2, r2, #16
 8001d20:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 0210 	bic.w	r2, r2, #16
 8001d46:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001d48:	f7fe fc00 	bl	800054c <HAL_GetTick>
 8001d4c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d4e:	e009      	b.n	8001d64 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001d50:	f7fe fbfc 	bl	800054c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d5e:	d901      	bls.n	8001d64 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e007      	b.n	8001d74 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0ee      	beq.n	8001d50 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8001d8a:	e005      	b.n	8001d98 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	3b0a      	subs	r3, #10
 8001d96:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b09      	cmp	r3, #9
 8001d9c:	d8f6      	bhi.n	8001d8c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	b2da      	uxtb	r2, r3
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr

08001db6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b085      	sub	sp, #20
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	b2db      	uxtb	r3, r3
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7bdb      	ldrb	r3, [r3, #15]
 8001e0e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b5b      	ldrb	r3, [r3, #13]
 8001e14:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7b9b      	ldrb	r3, [r3, #14]
 8001e1a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	e06f      	b.n	8001f02 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d011      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d00e      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d00b      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	2b07      	cmp	r3, #7
 8001e38:	d008      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d005      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	2b0a      	cmp	r3, #10
 8001e44:	d002      	beq.n	8001e4c <RTC_DateUpdate+0x5c>
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	2b0c      	cmp	r3, #12
 8001e4a:	d117      	bne.n	8001e7c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2b1e      	cmp	r3, #30
 8001e50:	d803      	bhi.n	8001e5a <RTC_DateUpdate+0x6a>
      {
        day++;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001e58:	e050      	b.n	8001efc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d005      	beq.n	8001e6c <RTC_DateUpdate+0x7c>
        {
          month++;
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	3301      	adds	r3, #1
 8001e64:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8001e6a:	e047      	b.n	8001efc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001e70:	2301      	movs	r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
          year++;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8001e7a:	e03f      	b.n	8001efc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	d008      	beq.n	8001e94 <RTC_DateUpdate+0xa4>
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b06      	cmp	r3, #6
 8001e86:	d005      	beq.n	8001e94 <RTC_DateUpdate+0xa4>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b09      	cmp	r3, #9
 8001e8c:	d002      	beq.n	8001e94 <RTC_DateUpdate+0xa4>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	2b0b      	cmp	r3, #11
 8001e92:	d10c      	bne.n	8001eae <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b1d      	cmp	r3, #29
 8001e98:	d803      	bhi.n	8001ea2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001ea0:	e02c      	b.n	8001efc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8001eac:	e026      	b.n	8001efc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d123      	bne.n	8001efc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b1b      	cmp	r3, #27
 8001eb8:	d803      	bhi.n	8001ec2 <RTC_DateUpdate+0xd2>
      {
        day++;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e01c      	b.n	8001efc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b1c      	cmp	r3, #28
 8001ec6:	d111      	bne.n	8001eec <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f839 	bl	8001f44 <RTC_IsLeapYear>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	e00d      	b.n	8001efc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e007      	b.n	8001efc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b1d      	cmp	r3, #29
 8001ef0:	d104      	bne.n	8001efc <RTC_DateUpdate+0x10c>
      {
        month++;
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d38b      	bcc.n	8001e22 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f000 f83b 	bl	8001fa8 <RTC_WeekDayNum>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	731a      	strb	r2, [r3, #12]
}
 8001f3a:	bf00      	nop
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8001f4e:	88fb      	ldrh	r3, [r7, #6]
 8001f50:	f003 0303 	and.w	r3, r3, #3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e01d      	b.n	8001f9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <RTC_IsLeapYear+0x60>)
 8001f62:	fba2 1203 	umull	r1, r2, r2, r3
 8001f66:	0952      	lsrs	r2, r2, #5
 8001f68:	2164      	movs	r1, #100	; 0x64
 8001f6a:	fb01 f202 	mul.w	r2, r1, r2
 8001f6e:	1a9b      	subs	r3, r3, r2
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	4a09      	ldr	r2, [pc, #36]	; (8001fa4 <RTC_IsLeapYear+0x60>)
 8001f7e:	fba2 1203 	umull	r1, r2, r2, r3
 8001f82:	09d2      	lsrs	r2, r2, #7
 8001f84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f88:	fb01 f202 	mul.w	r2, r1, r2
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e000      	b.n	8001f9a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8001f98:	2300      	movs	r3, #0
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	51eb851f 	.word	0x51eb851f

08001fa8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001fc6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001fc8:	78fb      	ldrb	r3, [r7, #3]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d82d      	bhi.n	800202a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4413      	add	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	1a9b      	subs	r3, r3, r2
 8001fda:	4a2c      	ldr	r2, [pc, #176]	; (800208c <RTC_WeekDayNum+0xe4>)
 8001fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe0:	085a      	lsrs	r2, r3, #1
 8001fe2:	78bb      	ldrb	r3, [r7, #2]
 8001fe4:	441a      	add	r2, r3
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	441a      	add	r2, r3
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3b01      	subs	r3, #1
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	4926      	ldr	r1, [pc, #152]	; (8002090 <RTC_WeekDayNum+0xe8>)
 8001ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8001ffc:	095b      	lsrs	r3, r3, #5
 8001ffe:	1ad2      	subs	r2, r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3b01      	subs	r3, #1
 8002004:	4922      	ldr	r1, [pc, #136]	; (8002090 <RTC_WeekDayNum+0xe8>)
 8002006:	fba1 1303 	umull	r1, r3, r1, r3
 800200a:	09db      	lsrs	r3, r3, #7
 800200c:	4413      	add	r3, r2
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <RTC_WeekDayNum+0xec>)
 8002012:	fba3 1302 	umull	r1, r3, r3, r2
 8002016:	1ad1      	subs	r1, r2, r3
 8002018:	0849      	lsrs	r1, r1, #1
 800201a:	440b      	add	r3, r1
 800201c:	0899      	lsrs	r1, r3, #2
 800201e:	460b      	mov	r3, r1
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a5b      	subs	r3, r3, r1
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e029      	b.n	800207e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800202a:	78fa      	ldrb	r2, [r7, #3]
 800202c:	4613      	mov	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	4413      	add	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	4a15      	ldr	r2, [pc, #84]	; (800208c <RTC_WeekDayNum+0xe4>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	085a      	lsrs	r2, r3, #1
 800203e:	78bb      	ldrb	r3, [r7, #2]
 8002040:	441a      	add	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	441a      	add	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	441a      	add	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4910      	ldr	r1, [pc, #64]	; (8002090 <RTC_WeekDayNum+0xe8>)
 8002050:	fba1 1303 	umull	r1, r3, r1, r3
 8002054:	095b      	lsrs	r3, r3, #5
 8002056:	1ad2      	subs	r2, r2, r3
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	490d      	ldr	r1, [pc, #52]	; (8002090 <RTC_WeekDayNum+0xe8>)
 800205c:	fba1 1303 	umull	r1, r3, r1, r3
 8002060:	09db      	lsrs	r3, r3, #7
 8002062:	4413      	add	r3, r2
 8002064:	1c9a      	adds	r2, r3, #2
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <RTC_WeekDayNum+0xec>)
 8002068:	fba3 1302 	umull	r1, r3, r3, r2
 800206c:	1ad1      	subs	r1, r2, r3
 800206e:	0849      	lsrs	r1, r1, #1
 8002070:	440b      	add	r3, r1
 8002072:	0899      	lsrs	r1, r3, #2
 8002074:	460b      	mov	r3, r1
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a5b      	subs	r3, r3, r1
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	b2db      	uxtb	r3, r3
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	38e38e39 	.word	0x38e38e39
 8002090:	51eb851f 	.word	0x51eb851f
 8002094:	24924925 	.word	0x24924925

08002098 <memset>:
 8002098:	4603      	mov	r3, r0
 800209a:	4402      	add	r2, r0
 800209c:	4293      	cmp	r3, r2
 800209e:	d100      	bne.n	80020a2 <memset+0xa>
 80020a0:	4770      	bx	lr
 80020a2:	f803 1b01 	strb.w	r1, [r3], #1
 80020a6:	e7f9      	b.n	800209c <memset+0x4>

080020a8 <__libc_init_array>:
 80020a8:	b570      	push	{r4, r5, r6, lr}
 80020aa:	2600      	movs	r6, #0
 80020ac:	4d0c      	ldr	r5, [pc, #48]	; (80020e0 <__libc_init_array+0x38>)
 80020ae:	4c0d      	ldr	r4, [pc, #52]	; (80020e4 <__libc_init_array+0x3c>)
 80020b0:	1b64      	subs	r4, r4, r5
 80020b2:	10a4      	asrs	r4, r4, #2
 80020b4:	42a6      	cmp	r6, r4
 80020b6:	d109      	bne.n	80020cc <__libc_init_array+0x24>
 80020b8:	f000 f81a 	bl	80020f0 <_init>
 80020bc:	2600      	movs	r6, #0
 80020be:	4d0a      	ldr	r5, [pc, #40]	; (80020e8 <__libc_init_array+0x40>)
 80020c0:	4c0a      	ldr	r4, [pc, #40]	; (80020ec <__libc_init_array+0x44>)
 80020c2:	1b64      	subs	r4, r4, r5
 80020c4:	10a4      	asrs	r4, r4, #2
 80020c6:	42a6      	cmp	r6, r4
 80020c8:	d105      	bne.n	80020d6 <__libc_init_array+0x2e>
 80020ca:	bd70      	pop	{r4, r5, r6, pc}
 80020cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80020d0:	4798      	blx	r3
 80020d2:	3601      	adds	r6, #1
 80020d4:	e7ee      	b.n	80020b4 <__libc_init_array+0xc>
 80020d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80020da:	4798      	blx	r3
 80020dc:	3601      	adds	r6, #1
 80020de:	e7f2      	b.n	80020c6 <__libc_init_array+0x1e>
 80020e0:	08002148 	.word	0x08002148
 80020e4:	08002148 	.word	0x08002148
 80020e8:	08002148 	.word	0x08002148
 80020ec:	0800214c 	.word	0x0800214c

080020f0 <_init>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr

080020fc <_fini>:
 80020fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020fe:	bf00      	nop
 8002100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002102:	bc08      	pop	{r3}
 8002104:	469e      	mov	lr, r3
 8002106:	4770      	bx	lr
